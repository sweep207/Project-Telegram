
/**
 * @command /restrictsave
 * @category Ti·ªán √≠ch
 * @author sweep
 * @date 2025-09-20
 * @usage /restrictsave(on|off), promote, demote
 * @description C·∫•m g·ª≠i ·∫£nh, video| c·∫•p quy·ªÅn admin, g·ª° quy·ªÅn admin.
 */
const fs = require('fs');
const path = require('path');

const RESTRICT_SAVE_FILE = path.join(__dirname, 'restrictsave.json');

// H√†m ƒë·ªçc tr·∫°ng th√°i restrict t·ª´ file
const readRestrictStatus = () => {
  if (fs.existsSync(RESTRICT_SAVE_FILE)) {
    return JSON.parse(fs.readFileSync(RESTRICT_SAVE_FILE, 'utf8'));
  }
  return {};
};

// H√†m ghi tr·∫°ng th√°i restrict v√†o file
const writeRestrictStatus = (data) => {
  fs.writeFileSync(RESTRICT_SAVE_FILE, JSON.stringify(data, null, 2));
};

module.exports = (bot, config) => {
  let restrictSave = readRestrictStatus(); // ƒê·ªçc tr·∫°ng th√°i t·ª´ file

  // üîß B·∫≠t/T·∫Øt c·∫•m l∆∞u n·ªôi dung
  bot.onText(/\/restrictsave (on|off)/, (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (userId.toString() !== config.adminId) {
      bot.sendMessage(chatId, '‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.');
      return;
    }

    const status = match[1]; // L·∫•y tr·∫°ng th√°i (on/off)
    restrictSave[chatId] = status === 'on'; // C·∫≠p nh·∫≠t tr·∫°ng th√°i
    writeRestrictStatus(restrictSave); // L∆∞u v√†o file

    bot.sendMessage(chatId, `‚úÖ ƒê√£ ${status === 'on' ? 'B·∫¨T' : 'T·∫ÆT'} ch·∫ø ƒë·ªô c·∫•m l∆∞u n·ªôi dung.`);
  });

  // üö´ Ki·ªÉm tra v√† c·∫•m ng∆∞·ªùi g·ª≠i n·ªôi dung b·ªã c·∫•m n·∫øu ch·∫ø ƒë·ªô restrictSave ƒëang b·∫≠t
  bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (restrictSave[chatId]) {
      if (
        msg.photo ||                     // ·∫¢nh
        msg.video ||                     // Video
        msg.animation ||                 // GIF
        msg.document ||                  // File
        msg.audio ||                     // Mp3
        msg.sticker ||                   // Nh√£n d√°n
        (msg.text && /(http|https):\/\/\S+/i.test(msg.text)) // Link
      ) {
        try {
          await bot.banChatMember(chatId, userId);
          bot.sendMessage(chatId, `‚ùå *${msg.from.username || 'ID: ' + userId}* ƒë√£ b·ªã ban v√¨ g·ª≠i n·ªôi dung b·ªã c·∫•m.`, { parse_mode: 'Markdown' });
        } catch (err) {
          console.error('L·ªói khi ban ng∆∞·ªùi d√πng:', err);
          bot.sendMessage(chatId, '‚ùå Kh√¥ng th·ªÉ ban ng∆∞·ªùi d√πng. Ki·ªÉm tra quy·ªÅn c·ªßa bot.');
        }
      }
    }
  });

  // üëë Th√™m admin
  bot.onText(/\/promote/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (userId.toString() !== config.adminId) {
      bot.sendMessage(chatId, '‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.');
      return;
    }

    if (!msg.reply_to_message) {
      bot.sendMessage(chatId, 'üìå Vui l√≤ng reply v√†o tin nh·∫Øn c·ªßa ng∆∞·ªùi c·∫ßn c·∫•p quy·ªÅn admin.');
      return;
    }

    const targetId = msg.reply_to_message.from.id;

    try {
      await bot.promoteChatMember(chatId, targetId, {
        can_change_info: true,
        can_delete_messages: true,
        can_invite_users: true,
        can_restrict_members: true,
        can_pin_messages: true,
        can_promote_members: false,
      });

      bot.sendMessage(chatId, `‚úÖ ƒê√£ thƒÉng c·∫•p *${msg.reply_to_message.from.username || 'ID: ' + targetId}* l√†m admin.`, { parse_mode: 'Markdown' });
    } catch (err) {
      console.error('L·ªói khi thƒÉng c·∫•p admin:', err);
      bot.sendMessage(chatId, '‚ùå Kh√¥ng th·ªÉ thƒÉng c·∫•p. Ki·ªÉm tra quy·ªÅn c·ªßa bot.');
    }
  });

  // ‚ùå B·ªè quy·ªÅn admin
  bot.onText(/\/demote/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (userId.toString() !== config.adminId) {
      bot.sendMessage(chatId, '‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.');
      return;
    }

    if (!msg.reply_to_message) {
      bot.sendMessage(chatId, 'üìå Vui l√≤ng reply v√†o tin nh·∫Øn c·ªßa ng∆∞·ªùi c·∫ßn h·∫° c·∫•p.');
      return;
    }

    const targetId = msg.reply_to_message.from.id;

    try {
      await bot.promoteChatMember(chatId, targetId, {
        can_change_info: false,
        can_delete_messages: false,
        can_invite_users: false,
        can_restrict_members: false,
        can_pin_messages: false,
        can_promote_members: false,
      });

      bot.sendMessage(chatId, `‚úÖ ƒê√£ h·∫° c·∫•p *${msg.reply_to_message.from.username || 'ID: ' + targetId}* kh·ªèi admin.`, { parse_mode: 'Markdown' });
    } catch (err) {
      console.error('L·ªói khi h·∫° c·∫•p admin:', err);
      bot.sendMessage(chatId, '‚ùå Kh√¥ng th·ªÉ h·∫° c·∫•p. Ki·ªÉm tra quy·ªÅn c·ªßa bot.');
    }
  });
};
