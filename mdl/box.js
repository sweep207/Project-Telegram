/**
 * @command /box
 * @category H·ªó tr·ª£
 * @author sweep
 * @date 2025-03-01
 * @usage (/rename|setphoto|clear) 
 * @description ƒê·ªïi t√™n, ·∫£nh group, x√≥a tin nh·∫Øn.
 */
const fs = require('fs');
const path = require('path');
 
module.exports = (bot, config) => {
  // üìù L·ªánh ƒë·ªïi t√™n nh√≥m
  bot.onText(/\/rename (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const newTitle = match[1]; // L·∫•y t√™n m·ªõi t·ª´ l·ªánh

    if (userId.toString() !== config.adminId) {
      bot.sendMessage(chatId, 'B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.');
      return;
    }

    try {
      await bot.setChatTitle(chatId, newTitle);
      bot.sendMessage(chatId, `‚úÖ T√™n nh√≥m ƒë√£ ƒë∆∞·ª£c ƒë·ªïi th√†nh: *${newTitle}*`, { parse_mode: 'Markdown' });
    } catch (err) {
      console.error('Kh√¥ng th·ªÉ ƒë·ªïi t√™n nh√≥m:', err);
      bot.sendMessage(chatId, '‚ùå Kh√¥ng th·ªÉ ƒë·ªïi t√™n nh√≥m. H√£y ki·ªÉm tra quy·ªÅn qu·∫£n tr·ªã vi√™n c·ªßa bot.');
    }
  });

  // üì∏ L·ªánh ƒë·ªïi ·∫£nh ƒë·∫°i di·ªán nh√≥m
  bot.onText(/\/setphoto/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (userId.toString() !== config.adminId) {
      bot.sendMessage(chatId, 'B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.');
      return;
    }

    if (!msg.reply_to_message || !msg.reply_to_message.photo) {
      bot.sendMessage(chatId, 'üìå Vui l√≤ng **reply** v√†o m·ªôt ·∫£nh v√† nh·∫≠p l·ªánh /setphoto.');
      return;
    }

    const photo = msg.reply_to_message.photo[msg.reply_to_message.photo.length - 1];  
    const fileId = photo.file_id;

    try {
      // L·∫•y ƒë∆∞·ªùng d·∫´n file t·ª´ Telegram
      const file = await bot.getFile(fileId);
      const filePath = file.file_path;
      const url = `https://api.telegram.org/file/bot${config.token}/${filePath}`;

      // T·∫£i ·∫£nh v·ªÅ
      const response = await fetch(url);
      if (!response.ok) throw new Error(`L·ªói t·∫£i ·∫£nh: ${response.statusText}`);
      
      // L∆∞u ·∫£nh v√†o th∆∞ m·ª•c t·∫°m
      const tempPath = path.join(__dirname, 'group_photo.jpg');
      const buffer = await response.arrayBuffer();
      fs.writeFileSync(tempPath, Buffer.from(buffer));

      // ƒê·∫∑t ·∫£nh ƒë·∫°i di·ªán nh√≥m
      await bot.setChatPhoto(chatId, fs.createReadStream(tempPath));
      bot.sendMessage(chatId, '‚úÖ ·∫¢nh ƒë·∫°i di·ªán nh√≥m ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.');

      // X√≥a file sau khi ƒë·ªïi xong
      fs.unlinkSync(tempPath);
    } catch (err) {
      console.error('Kh√¥ng th·ªÉ ƒë·ªïi ·∫£nh ƒë·∫°i di·ªán:', err);
      bot.sendMessage(chatId, '‚ùå Kh√¥ng th·ªÉ ƒë·ªïi ·∫£nh ƒë·∫°i di·ªán. ƒê·∫£m b·∫£o bot c√≥ quy·ªÅn qu·∫£n tr·ªã vi√™n.');
    }
  });

  // üóëÔ∏è L·ªánh x√≥a l·ªãch s·ª≠ chat
  bot.onText(/\/clear/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (userId.toString() !== config.adminId) {
      bot.sendMessage(chatId, 'B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.');
      return;
    }

    try {
      const messages = await bot.getChatHistory(chatId, { limit: 100 });

      for (const message of messages) {
        try {
          await bot.deleteMessage(chatId, message.message_id);
        } catch (err) {
          console.error('Kh√¥ng th·ªÉ x√≥a tin nh·∫Øn:', err);
        }
      }

      bot.sendMessage(chatId, '‚úÖ ƒê√£ x√≥a l·ªãch s·ª≠ chat.');
    } catch (err) {
      console.error('Kh√¥ng th·ªÉ l·∫•y l·ªãch s·ª≠ chat:', err);
      bot.sendMessage(chatId, '‚ùå Kh√¥ng th·ªÉ x√≥a l·ªãch s·ª≠ chat.');
    }
  });
};