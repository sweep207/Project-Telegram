/**
 * @command /locket
 * @category Tools
 * @author sweep
 * @usage
 * /locket spam [url] [s·ªë lu·ªìng] [tin nh·∫Øn]
 * /locket delete
 */
const axios = require('axios');

// Bi·∫øn qu·∫£n l√Ω tr·∫°ng th√°i h·ªôi tho·∫°i cho ch·ª©c nƒÉng delete
const conversationState = {};

module.exports = (bot) => {
    const LOCKET_SPAM_API = 'https://locket-api-c4ji.onrender.com/spam_friend_request';
    const LOCKET_DELETE_API = 'https://locket-api-c4ji.onrender.com/delete_friend_request';

    bot.onText(/\/locket(?: (.+))?/, async (msg, match) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id.toString();
        const args = match[1] ? match[1].split(' ') : [];
        const subcommand = args.shift()?.toLowerCase();

        if (!subcommand) {
            const usageText = `
üîë **H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng l·ªánh Locket:**

1Ô∏è‚É£ **Spam k·∫øt b·∫°n (d√πng trong nh√≥m ho·∫∑c ri√™ng):**
   \`\`\`/locket spam [url] [s·ªë lu·ªìng] [tin nh·∫Øn]\`\`\`
   *-* \`url\`: Link Locket c·ªßa ng∆∞·ªùi b·∫°n mu·ªën spam.
   *-* \`s·ªë lu·ªìng\`: S·ªë lu·ªìng ch·∫°y (v√≠ d·ª•: 50).
   *-* \`tin nh·∫Øn\`: L·ªùi nh·∫Øn b·∫°n mu·ªën g·ª≠i.

2Ô∏è‚É£ **X√≥a l·ªùi m·ªùi k·∫øt b·∫°n (ch·ªâ d√πng khi nh·∫Øn ri√™ng bot):**
   \`\`\`/locket delete\`\`\`
   Bot s·∫Ω h·ªèi b·∫°n th√¥ng tin t√†i kho·∫£n ƒë·ªÉ ti·∫øn h√†nh x√≥a.
            `;
            return bot.sendMessage(chatId, usageText, { parse_mode: 'Markdown' });
        }

        switch (subcommand) {
            case 'spam':
                await handleSpam(chatId, args);
                break;
            case 'delete':
                // B·∫Øt bu·ªôc ph·∫£i chat ri√™ng
                if (msg.chat.type !== 'private') {
                    return bot.sendMessage(chatId, 'üóëÔ∏è ƒê·ªÉ b·∫£o m·∫≠t, vui l√≤ng **nh·∫Øn tin ri√™ng** cho bot ƒë·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng x√≥a l·ªùi m·ªùi k·∫øt b·∫°n.');
                }
                // B·∫Øt ƒë·∫ßu cu·ªôc h·ªôi tho·∫°i ƒë·ªÉ l·∫•y th√¥ng tin
                conversationState[userId] = { step: 'delete_email', data: {} };
                bot.sendMessage(chatId, 'Vui l√≤ng nh·∫≠p **email** t√†i kho·∫£n Locket c·ªßa b·∫°n:', { parse_mode: 'Markdown' });
                break;
            default:
                bot.sendMessage(chatId, 'L·ªánh kh√¥ng h·ª£p l·ªá. G√µ `/locket` ƒë·ªÉ xem h∆∞·ªõng d·∫´n.');
                break;
        }
    });

    // H√†m x·ª≠ l√Ω tin nh·∫Øn trong cu·ªôc h·ªôi tho·∫°i (cho ch·ª©c nƒÉng delete)
    bot.on('message', async (msg) => {
        const userId = msg.from.id.toString();
        const text = msg.text;

        if (!conversationState[userId] || text.startsWith('/')) return;
        
        const state = conversationState[userId];
        const chatId = msg.chat.id;

        try {
            switch (state.step) {
                case 'delete_email':
                    state.data.email = text;
                    state.step = 'delete_password';
                    bot.sendMessage(chatId, 'Vui l√≤ng nh·∫≠p **m·∫≠t kh·∫©u** c·ªßa b·∫°n:', { parse_mode: 'Markdown' });
                    break;
                case 'delete_password':
                    state.data.password = text;
                    state.step = 'delete_limit';
                    bot.sendMessage(chatId, 'Nh·∫≠p **s·ªë l∆∞·ª£ng** l·ªùi m·ªùi mu·ªën x√≥a (v√≠ d·ª•: 50):', { parse_mode: 'Markdown' });
                    break;
                case 'delete_limit':
                    if (isNaN(parseInt(text))) return bot.sendMessage(chatId, 'Vui l√≤ng nh·∫≠p m·ªôt con s·ªë h·ª£p l·ªá.');
                    state.data.limit = parseInt(text);
                    state.step = 'delete_threads';
                    bot.sendMessage(chatId, 'Nh·∫≠p **s·ªë lu·ªìng** ƒë·ªÉ ch·∫°y (v√≠ d·ª•: 3):', { parse_mode: 'Markdown' });
                    break;
                case 'delete_threads':
                    if (isNaN(parseInt(text))) return bot.sendMessage(chatId, 'Vui l√≤ng nh·∫≠p m·ªôt con s·ªë h·ª£p l·ªá.');
                    state.data.num_threads = parseInt(text);
                    // K·∫øt th√∫c h·ªôi tho·∫°i v√† g·ªçi API
                    delete conversationState[userId];
                    await handleDelete(chatId, state.data); // G·ªçi h√†m handleDelete ƒë√£ ƒë∆∞·ª£c th√™m v√†o
                    break;
            }
        } catch (error) {
            delete conversationState[userId];
            console.error(error);
            bot.sendMessage(chatId, 'ƒê√£ c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω.');
        }
    });

    // --- C√ÅC H√ÄM X·ª¨ L√ù API ---

    async function handleSpam(chatId, args) {
        if (args.length < 3) {
            return bot.sendMessage(chatId, '‚ùå Sai c√∫ ph√°p! D√πng: `/locket spam [url] [s·ªë lu·ªìng] [tin nh·∫Øn]`');
        }

        const target_url = args[0];
        const num_threads = parseInt(args[1]);
        const custom_username = args.slice(2).join(' ');

        if (isNaN(num_threads)) {
            return bot.sendMessage(chatId, '‚ùå S·ªë lu·ªìng ph·∫£i l√† m·ªôt con s·ªë.');
        }

        const payload = {
            target_url,
            custom_username,
            use_emoji: true,
            num_threads
        };

        bot.sendMessage(chatId, 'üöÄ ƒêang g·ª≠i y√™u c·∫ßu spam (phi√™n b·∫£n n√¢ng cao), vui l√≤ng ch·ªù...');

        try {
            const response = await axios.post(LOCKET_SPAM_API, payload, {
                headers: {
                    'Content-Type': 'application/json',
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36'
                }
            });

            const data = response.data;

            if (data.status === 'success') {
                const message = data.message;
                const totalProxies = data.proxy_info.total_proxies;
                const refreshTime = data.proxy_info.next_proxy_refresh;

                const resultText = `
‚úÖ **${message}**

- **T·ªïng s·ªë proxy c√≥ s·∫µn:** \`${totalProxies}\`
- **Th·ªùi gian l√†m m·ªõi proxy:** ${refreshTime}
                `;
                bot.sendMessage(chatId, resultText, { parse_mode: 'Markdown' });
            } else {
                bot.sendMessage(chatId, `‚ö†Ô∏è C√≥ l·ªói x·∫£y ra: ${data.message || 'API kh√¥ng b√°o th√†nh c√¥ng.'}`);
            }
        } catch (error) {
            const errorMessage = error.response?.data?.message || 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server API.';
            bot.sendMessage(chatId, `‚ùå L·ªói: ${errorMessage}`);
        }
    }

    // --- H√ÄM B·ªä THI·∫æU ƒê√É ƒê∆Ø·ª¢C B·ªî SUNG ---
    async function handleDelete(chatId, data) {
        bot.sendMessage(chatId, 'üóëÔ∏è ƒêang g·ª≠i y√™u c·∫ßu x√≥a l·ªùi m·ªùi, vui l√≤ng ch·ªù...');

        try {
            const response = await axios.post(LOCKET_DELETE_API, {
                email: data.email,
                password: data.password,
                limit: data.limit,
                num_threads: data.num_threads
            }, {
                // Th√™m header cho ch·∫Øc ch·∫Øn, ƒë·ªÅ ph√≤ng API n√†y c≈©ng ki·ªÉm tra User-Agent
                headers: {
                    'Content-Type': 'application/json',
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36'
                }
            });

            // G·ª≠i th√¥ng b√°o t·ª´ API v·ªÅ cho ng∆∞·ªùi d√πng
            bot.sendMessage(chatId, `üì¢ **Th√¥ng b√°o t·ª´ API:**\n${response.data.message}`);

        } catch (error) {
            const errorMessage = error.response?.data?.message || 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server API.';
            bot.sendMessage(chatId, `‚ùå **L·ªói:** ${errorMessage}`);
        }
    }
};